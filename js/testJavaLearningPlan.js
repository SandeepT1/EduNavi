// Test function to verify the Java Learning Plan enhancement
function testJavaLearningPlanResponse() {
  // Hide the welcome message
  const welcomeMessage = document.querySelector('.welcome-message');
  if (welcomeMessage) {
    welcomeMessage.style.display = 'none';
  }

  // Add a system message explaining the test
  addMessage("Testing the enhanced Java Learning Plan visualization:", false);

  // Create a sample response that matches the format from the issue description
  const javaLearningPlanResponse = {
    "reply": "Absolutely! Let's design a three-month learning plan to help you master Java, a versatile and widely-used programming language. This plan is broken down into step-by-step weekly segments to keep you organized and motivated. Assume that you can dedicate around 5-10 hours per week to your learning. If you have more or less time, feel free to adjust the pace accordingly.\n\n### Month 1: Foundations of Java\n\n**Week 1: Introduction to Java**\n- **Goal**: Understand the basics of Java and set up your environment.\n- **Steps**:\n  1. **Set Up Development Environment**: Install Java Development Kit (JDK) and IntelliJ IDEA or Eclipse.\n  2. **Learn Basics**: Study syntax, basic data types, and variables.\n  3. **Recommended Resources**:\n     - [Codecademy's Learn Java](https://www.codecademy.com/learn/learn-java)\n     - [Java Programming on Udacity - Intro](https://www.udacity.com/course/java-programming-basics--ud282)\n- **Practice**: Write simple programs that print text and perform arithmetic operations.\n\n**Week 2: Control Flow Statements**\n- **Goal**: Master loops, if statements, and switch cases.\n- **Steps**:\n  1. Explore `if-else`, `switch`, `while`, `for`, and `do-while` loops.\n  2. Implement small projects using control flow.\n  3. **Recommended Resource**: [Oracle's Java Tutorials - Control Flow Statements](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/flow.html)\n- **Practice**: Solve basic algorithmic problems on LeetCode or HackerRank.\n\n**Week 3: Arrays and Strings**\n- **Goal**: Work with arrays and strings effectively.\n- **Steps**:\n  1. Understand how to declare, manipulate, and iterate over arrays.\n  2. Perform operations on strings (concatenation, substring, etc.).\n  3. **Recommended Resource**: [Java Strings and Arrays on GeeksforGeeks](https://www.geeksforgeeks.org/java/)\n- **Practice**: Create programs that reverse strings and sort arrays.\n\n**Week 4: Object-Oriented Programming (OOP) - Part 1**\n- **Goal**: Grasp the fundamental concepts of OOP in Java.\n- **Steps**:\n  1. Study classes, objects, methods, and constructors.\n  2. Understand encapsulation and access modifiers.\n  3. **Recommended Resource**: [Coursera's Java Programming: Solving Problems with Software](https://www.coursera.org/learn/java-programming)\n- **Practice**: Create a simple class-based project, like a basic Bookstore management system.\n\n### Month 2: Intermediate Java Concepts\n\n**Week 5: Object-Oriented Programming (OOP) - Part 2**\n- **Goal**: Deepen your understanding of OOP.\n- **Steps**:\n  1. Explore inheritance, polymorphism, and method overloading/overriding.\n  2. Learn about interfaces and abstract classes.\n  3. **Recommended Resource**: [Oracle's Java Tutorials - Inheritance and Interfaces](https://docs.oracle.com/javase/tutorial/java/IandI/index.html)\n- **Practice**: Convert the previous OOP project by applying advanced OOP concepts.\n\n**Week 6: Exception Handling**\n- **Goal**: Handle errors and exceptions smoothly.\n- **Steps**:\n  1. Study try-catch blocks, finally, and custom exceptions.\n  2. Implement error-handling scenarios in your projects.\n  3. **Recommended Resource**: [Exception Handling in Java - JavaTPoint](https://www.javatpoint.com/exception-handling-in-java)\n- **Practice**: Modify an existing project to include robust exception handling.\n\n**Week 7: Collections Framework**\n- **Goal**: Use Java Collections API efficiently.\n- **Steps**:\n  1. Explore lists, sets, and maps.\n  2. Study iterators and the use of generics.\n  3. **Recommended Resource**: [Java Collections Framework Overview - Oracle](https://docs.oracle.com/javase/tutorial/collections/index.html)\n- **Practice**: Write programs that utilize different collection types to manage data.\n\n**Week 8: File I/O and Serialization**\n- **Goal**: Manage input/output operations and serialize objects.\n- **Steps**:\n  1. Explore reading from and writing to files.\n  2. Understand object serialization and deserialization.\n  3. **Recommended Resource**: [Java I/O Tutorial - TutorialsPoint](https://www.tutorialspoint.com/java/java_files_io.htm)\n- **Practice**: Create a project that reads data from files and serializes objects.\n\n### Month 3: Advanced Concepts and Project Development\n\n**Week 9: Java Concurrency**\n- **Goal**: Understand and apply multithreading.\n- **Steps**:\n  1. Learn about threads, concurrency, and synchronization.\n  2. Implement basic multithreading scenarios.\n  3. **Recommended Resource**: [Concurrency in Java - Baeldung](https://www.baeldung.com/java-concurrency)\n- **Practice**: Develop a simple multithreaded application.\n\n**Week 10: Java Networking Basics**\n- **Goal**: Connect Java applications over a network.\n- **Steps**:\n  1. Explore sockets and URL objects.\n  2. Understand basic HTTP requests in Java.\n  3. **Recommended Resource**: [Java Networking - JavaTPoint](https://www.javatpoint.com/java-networking)\n- **Practice**: Create a basic server-client application.\n\n**Week 11: Introduction to JavaFX**\n- **Goal**: Build interactive GUI applications.\n- **Steps**:\n  1. Learn JavaFX components and layout management.\n  2. Create simple GUI applications.\n  3. **Recommended Resource**: [Official JavaFX Documentation](https://openjfx.io/)\n- **Practice**: Develop a simple desktop application like a calculator.\n\n**Week 12: Final Project and Review**\n- **Goal**: Combine all learned concepts into a comprehensive project.\n- **Steps**:\n  1. Plan and design a project that incorporates Java fundamentals, OOP, collections, file I/O, and possibly GUI.\n  2. Implement and test your project thoroughly.\n  3. Seek feedback from communities like [Stack Overflow](https://stackoverflow.com/) or the [Java subreddit](https://www.reddit.com/r/Java/).\n- **Completion**: Reflect on what you've learned and plan for further learning if desired (e.g., advanced Java topics or frameworks like Spring).\n\nBy following this structured learning path, you'll build a solid foundation in Java over three months. Stay persistent, seek help when needed, and most importantly, enjoy the learning process!"
  };

  // Process the response
  setTimeout(() => {
    processResponse(javaLearningPlanResponse);
  }, 1000);

  // Add a message explaining what happened
  setTimeout(() => {
    addMessage("The Java Learning Plan has been transformed from plain text into an enhanced visual format with cards, lists, and interactive elements.", false);
  }, 2000);
}
